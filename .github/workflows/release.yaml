on:
  release:
    types: [published]

name: Release ProjectX Tenant Provisioner

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/tenant-controller
 
jobs:
  build:
    name: Build Container
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: checkout
      uses: actions/checkout@v3
    - name: log in to the container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=sha
    - name: build and push Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
  # manifest:
  #   name: Create Deployment Manifest
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #   - name: Install Kustomize
  #     run: curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
  #   - name: set lower case owner name
  #     run: |
  #       echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
  #     env:
  #       OWNER: '${{ github.repository_owner }}'
  #   - name: Make manifests
  #     run: make manifests generate
  #   - name: Edit Image
  #     run: |
  #       kustomize edit set image controller=${{ env.REGISTRY }}/${{ env.OWNER_LC }}/tenant-controller:${{ github.ref_name }}
  #       kustomize build --output deploy.yaml
  #     working-directory: manifests
  #   - name: Create Release
  #     id: create_release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ github.ref }}
  #       release_name: Release ${{ github.ref }}
  #       draft: false
  #       prerelease: false
  #   - name: Upload Release Asset
  #     id: upload-release-asset 
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{ steps.create_release.outputs.upload_url }} 
  #       asset_path: manifests/deploy.yaml
  #       asset_name: deploy.yaml
  #       asset_content_type: application/yaml
